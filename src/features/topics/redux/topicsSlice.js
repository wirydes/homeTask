import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { getReactTopics } from '../services/topicsApi';
import { apiCallStatus } from '../../../utils/constants';

export const initialState = {
  relatedTopics: [],
  stargazerCount: 0,
  status: apiCallStatus.idle,
  errorMessage: '',
  customTopic: null,
};

// The function below is called a thunk and allows us to perform async logic.
export const getTopics = createAsyncThunk(
  'topics/fetch',
  async ({
    signal,
    paramsQuery = { name: '', stargazers: 3, topics: 3 },
    customQuery = '',
  }) => {
    const { data, error } = await getReactTopics({
      signal,
      paramsQuery,
      customQuery,
    });

    const isCustom = Boolean(customQuery);

    const isError = !!error;
    return isError
      ? { isError, error }
      : { isError, topic: data.topic, isCustom, data };
  }
);

export const topicsSlice = createSlice({
  name: 'topics',
  initialState,
  // **The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    resetCustom: (state, action) => {
      state.customTopic = null;
    },
  },
  // **The `extraReducers` field lets the slice handle actions defined elsewhere,
  // **including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getTopics.pending, (state) => {
        state.status = apiCallStatus.loading;
      })
      .addCase(getTopics.fulfilled, (state, action) => {
        state.status = apiCallStatus.idle;
        const { payload } = action;
        const { isCustom, isError } = payload;

        if (isError) {
          const { error } = payload;
          state.errorMessage = error;

          return;
        }

        if (!isCustom) {
          const { topic } = { ...payload };
          state.errorMessage = '';
          state.stargazerCount = topic.stargazerCount;
          state.relatedTopics = [
            ...topic.relatedTopics.map((item) => ({
              ...item,
              stargazers: item.stargazers.nodes.map((inner) => inner),
            })),
          ];

          return;
        }

        const { data } = payload;

        const keys = Object.keys(data);
        let fixed = {};
        fixed = keys.reduce((pre, el, i) => {
          const temp = { ...pre };
          const value = payload[el];
          temp[el] = value;
          return temp;
        }, {});
        state.customTopic = { ...fixed };
      })
      .addCase(getTopics.rejected, (state, action) => {
        state.status = apiCallStatus.idle;
        state.errorMessage = action.error.message;
      });
  },
});

export const { resetCustom } = topicsSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectTopicList = (state) => state.topics.relatedTopics;
export const selectStagazerCount = (state) => state.topics.stargazerCount;
export const selectTopicStatus = (state) => state.topics.status;
export const selectErrorMessage = (state) => state.topics.errorMessage;
export const selectCustomTopic = (state) => state.topics.customTopic;

export default topicsSlice.reducer;
